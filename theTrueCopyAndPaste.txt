(gdb) quit
[elizabeh@lnxsrv07 ~]$ gdb ~eggert/bin64/bin/emacs-25.2
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-94.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /w/fac.2/cs/eggert/bin64/bin/emacs-25.2...done.
(gdb) break Ftimes
Breakpoint 1 at 0x547ad0: file data.c, line 2815.
(gdb) r -Q -batch -eval '(print (* 1250284240 -1844255039))'
Starting program: /u/cs/fac/eggert/bin64/bin/emacs-25.2 -Q -batch -eval '(print (* 1250284240 -1844255039))'
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
[New Thread 0x7fffe3174700 (LWP 31348)]

Breakpoint 1, Ftimes (nargs=2, args=0x7fffffffd750) at data.c:2815
2815	{
Missing separate debuginfos, use: debuginfo-install alsa-lib-1.1.1-1.el7.x86_64 at-spi2-atk-2.14.1-1.el7.x86_64 at-spi2-core-2.14.1-2.el7.x86_64 atk-2.14.0-1.el7.x86_64 cairo-1.14.2-1.el7.x86_64 cairo-gobject-1.14.2-1.el7.x86_64 dbus-libs-1.6.12-17.el7.x86_64 expat-2.1.0-10.el7_3.x86_64 fontconfig-2.10.95-10.el7.x86_64 freetype-2.4.11-12.el7.x86_64 gdk-pixbuf2-2.31.6-3.el7.x86_64 glib2-2.46.2-4.el7.x86_64 glibc-2.17-157.el7_3.1.x86_64 gmp-6.0.0-12.el7_1.x86_64 gnutls-3.3.24-1.el7.x86_64 graphite2-1.3.6-1.el7_2.x86_64 gtk3-3.14.13-20.el7.x86_64 harfbuzz-0.9.36-1.el7.x86_64 jbigkit-libs-2.0-11.el7.x86_64 keyutils-libs-1.5.8-3.el7.x86_64 krb5-libs-1.14.1-27.el7_3.x86_64 libICE-1.0.9-2.el7.x86_64 libSM-1.2.2-2.el7.x86_64 libX11-1.6.3-3.el7.x86_64 libXau-1.0.8-2.1.el7.x86_64 libXcomposite-0.4.4-4.1.el7.x86_64 libXcursor-1.1.14-2.1.el7.x86_64 libXdamage-1.1.4-4.1.el7.x86_64 libXext-1.3.3-3.el7.x86_64 libXfixes-5.0.1-2.1.el7.x86_64 libXft-2.3.2-2.el7.x86_64 libXi-1.7.4-2.el7.x86_64 libXinerama-1.1.3-2.1.el7.x86_64 libXpm-3.5.11-3.el7.x86_64 libXrandr-1.4.2-2.el7.x86_64 libXrender-0.9.8-2.1.el7.x86_64 libXxf86vm-1.1.3-2.1.el7.x86_64 libacl-2.2.51-12.el7.x86_64 libattr-2.4.46-12.el7.x86_64 libcom_err-1.42.9-9.el7.x86_64 libcroco-0.6.8-5.el7.x86_64 libdrm-2.4.67-3.el7.x86_64 libffi-3.0.13-18.el7.x86_64 libgcc-4.8.5-11.el7.x86_64 libjpeg-turbo-1.2.90-5.el7.x86_64 libpng-1.5.13-7.el7_2.x86_64 librsvg2-2.39.0-1.el7.x86_64 libselinux-2.5-6.el7.x86_64 libtasn1-3.8-3.el7.x86_64 libtiff-4.0.3-25.el7_2.x86_64 libuuid-2.23.2-33.el7.x86_64 libxcb-1.11-4.el7.x86_64 libxml2-2.9.1-6.el7_2.3.x86_64 libxshmfence-1.2-1.el7.x86_64 mesa-libEGL-11.2.2-2.20160614.el7.x86_64 mesa-libGL-11.2.2-2.20160614.el7.x86_64 mesa-libgbm-11.2.2-2.20160614.el7.x86_64 mesa-libglapi-11.2.2-2.20160614.el7.x86_64 ncurses-libs-5.9-13.20130511.el7.x86_64 nettle-2.7.1-8.el7.x86_64 openssl-libs-1.0.1e-60.el7.x86_64 p11-kit-0.20.7-3.el7.x86_64 pango-1.36.8-2.el7.x86_64 pcre-8.32-15.el7_2.1.x86_64 pixman-0.34.0-1.el7.x86_64 trousers-0.3.13-1.el7.x86_64 xz-libs-5.2.2-1.el7.x86_64 zlib-1.2.7-17.el7.x86_64
(gdb) set disasseble-next-line on
No symbol "disasseble" in current context.
(gdb) set disassemble-next-line on
(gdb) disas
Dump of assembler code for function Ftimes:
=> 0x0000000000547ad0 <+0>:	mov    %rsi,%rdx
   0x0000000000547ad3 <+3>:	mov    %rdi,%rsi
   0x0000000000547ad6 <+6>:	mov    $0x2,%edi
   0x0000000000547adb <+11>:	jmpq   0x5477d0 <arith_driver>
End of assembler dump.
(gdb) s
2816	  return arith_driver (Amult, nargs, args);
=> 0x0000000000547ad3 <Ftimes+3>:	48 89 fe	mov    %rdi,%rsi
   0x0000000000547ad6 <Ftimes+6>:	bf 02 00 00 00	mov    $0x2,%edi
   0x0000000000547adb <Ftimes+11>:	e9 f0 fc ff ff	jmpq   0x5477d0 <arith_driver>
(gdb) s
arith_driver (code=Amult, nargs=2, args=0x7fffffffd750) at data.c:2642
2642	  switch (code)
=> 0x00000000005477d0 <arith_driver+0>:	83 ff 02	cmp    $0x2,%edi
   0x00000000005477d3 <arith_driver+3>:	0f 82 4f 02 00 00	jb     0x547a28 <arith_driver+600>
(gdb) s
2652	      accum = 1;
=> 0x00000000005477d9 <arith_driver+9>:	41 ba 01 00 00 00	mov    $0x1,%r10d
(gdb) s
2642	  switch (code)
=> 0x00000000005477df <arith_driver+15>:	83 ff 03	cmp    $0x3,%edi
   0x00000000005477e2 <arith_driver+18>:	76 10	jbe    0x5477f4 <arith_driver+36>
(gdb) s
2661	  for (argnum = 0; argnum < nargs; argnum++)
=> 0x00000000005477f4 <arith_driver+36>:	48 85 f6	test   %rsi,%rsi
   0x00000000005477f7 <arith_driver+39>:	0f 8e 7a 02 00 00	jle    0x547a77 <arith_driver+679>
(gdb) s
2635	{
=> 0x00000000005477fd <arith_driver+45>:	41 57	push   %r15
   0x00000000005477ff <arith_driver+47>:	89 f9	mov    %edi,%ecx
(gdb) s
2661	  for (argnum = 0; argnum < nargs; argnum++)
=> 0x0000000000547801 <arith_driver+49>:	45 31 ff	xor    %r15d,%r15d
(gdb) s
2635	{
=> 0x0000000000547804 <arith_driver+52>:	41 56	push   %r14
   0x0000000000547806 <arith_driver+54>:	49 89 d6	mov    %rdx,%r14
   0x0000000000547809 <arith_driver+57>:	41 55	push   %r13
   0x000000000054780b <arith_driver+59>:	49 89 cd	mov    %rcx,%r13
   0x000000000054780e <arith_driver+62>:	41 54	push   %r12
   0x0000000000547810 <arith_driver+64>:	49 89 f4	mov    %rsi,%r12
   0x0000000000547813 <arith_driver+67>:	55	push   %rbp
(gdb) s
2661	  for (argnum = 0; argnum < nargs; argnum++)
=> 0x0000000000547814 <arith_driver+68>:	4c 89 d5	mov    %r10,%rbp
(gdb) s
2635	{
=> 0x0000000000547817 <arith_driver+71>:	53	push   %rbx
(gdb) s
2661	  for (argnum = 0; argnum < nargs; argnum++)
=> 0x0000000000547818 <arith_driver+72>:	31 db	xor    %ebx,%ebx
(gdb) s
2635	{
=> 0x000000000054781a <arith_driver+74>:	48 83 ec 28	sub    $0x28,%rsp
(gdb) s
2661	  for (argnum = 0; argnum < nargs; argnum++)
=> 0x000000000054781e <arith_driver+78>:	48 c7 44 24 18 00 00 00 00	movq   $0x0,0x18(%rsp)
   0x0000000000547827 <arith_driver+87>:	66 0f 1f 84 00 00 00 00 00	nopw   0x0(%rax,%rax,1)
(gdb) s
2670	      val = args[argnum];
=> 0x0000000000547830 <arith_driver+96>:	49 8b 3c de	mov    (%r14,%rbx,8),%rdi
(gdb) s
2671	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);
(gdb) s
MARKERP (x=5001136962) at data.c:2671
2671	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);
(gdb) s
MISCP (x=5001136962) at data.c:2671
2671	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);
(gdb) s
XTYPE (a=5001136962) at lisp.h:864
864	  return lisp_h_XTYPE (a);
=> 0x0000000000547834 <arith_driver+100>:	89 f8	mov    %edi,%eax
   0x0000000000547836 <arith_driver+102>:	89 fa	mov    %edi,%edx
   0x0000000000547838 <arith_driver+104>:	83 e0 07	and    $0x7,%eax
(gdb) s
MARKERP (x=5001136962) at lisp.h:2618
2618	  return lisp_h_MARKERP (x);
=> 0x000000000054783b <arith_driver+107>:	83 f8 01	cmp    $0x1,%eax
   0x000000000054783e <arith_driver+110>:	0f 84 aa 00 00 00	je     0x5478ee <arith_driver+286>
(gdb) s
arith_driver (code=Amult, nargs=2, args=0x7fffffffd750) at data.c:2671
2671	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);
(gdb) s
NUMBERP (x=5001136962) at data.c:2671
2671	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);
(gdb) s
INTEGERP (x=<optimized out>) at lisp.h:2608
2608	  return lisp_h_INTEGERP (x);
=> 0x0000000000547844 <arith_driver+116>:	89 fa	mov    %edi,%edx
   0x0000000000547846 <arith_driver+118>:	83 e2 03	and    $0x3,%edx
(gdb) s
NUMBERP (x=5001136962) at lisp.h:2566
2566	  return INTEGERP (x) || FLOATP (x);
=> 0x0000000000547849 <arith_driver+121>:	83 fa 02	cmp    $0x2,%edx
   0x000000000054784c <arith_driver+124>:	74 38	je     0x547886 <arith_driver+182>
   0x000000000054784e <arith_driver+126>:	83 f8 07	cmp    $0x7,%eax
   0x0000000000547851 <arith_driver+129>:	74 33	je     0x547886 <arith_driver+182>
(gdb) s
arith_driver (code=Amult, nargs=2, args=0x7fffffffd750) at data.c:2673
2673	      if (FLOATP (val))
=> 0x0000000000547886 <arith_driver+182>:	83 f8 07	cmp    $0x7,%eax
   0x0000000000547889 <arith_driver+185>:	0f 84 a1 01 00 00	je     0x547a30 <arith_driver+608>
(gdb) s
2676	      args[argnum] = val;
=> 0x000000000054788f <arith_driver+191>:	49 89 3c de	mov    %rdi,(%r14,%rbx,8)
(gdb) s
2677	      next = XINT (args[argnum]);
(gdb) s
XINT (a=5001136962) at lisp.h:844
844	  return lisp_h_XINT (a);
=> 0x0000000000547893 <arith_driver+195>:	48 c1 ff 02	sar    $0x2,%rdi
(gdb) s
arith_driver (code=Amult, nargs=2, args=0x7fffffffd750) at data.c:2678
2678	      switch (code)
=> 0x0000000000547897 <arith_driver+199>:	41 83 fd 08	cmp    $0x8,%r13d
   0x000000000054789b <arith_driver+203>:	77 23	ja     0x5478c0 <arith_driver+240>
   0x000000000054789d <arith_driver+205>:	ff 24 cd 60 f5 5e 00	jmpq   *0x5ef560(,%rcx,8)
   0x00000000005478a4 <arith_driver+212>:	0f 1f 40 00	nopl   0x0(%rax)
(gdb) s
2690		  overflow |= INT_MULTIPLY_WRAPV (accum, next, &accum);
=> 0x0000000000547998 <arith_driver+456>:	48 0f af fd	imul   %rbp,%rdi
   0x000000000054799c <arith_driver+460>:	0f 90 c0	seto   %al
   0x000000000054799f <arith_driver+463>:	48 89 fd	mov    %rdi,%rbp
   0x00000000005479a2 <arith_driver+466>:	41 09 c7	or     %eax,%r15d
(gdb) s
2691		  break;
=> 0x00000000005479a5 <arith_driver+469>:	e9 16 ff ff ff	jmpq   0x5478c0 <arith_driver+240>
   0x00000000005479aa <arith_driver+474>:	66 0f 1f 44 00 00	nopw   0x0(%rax,%rax,1)
(gdb) s
2661	  for (argnum = 0; argnum < nargs; argnum++)
=> 0x00000000005478c0 <arith_driver+240>:	48 83 c3 01	add    $0x1,%rbx
   0x00000000005478c4 <arith_driver+244>:	49 39 dc	cmp    %rbx,%r12
   0x00000000005478c7 <arith_driver+247>:	7e 57	jle    0x547920 <arith_driver+336>
(gdb) s
2663	      if (! overflow)
=> 0x00000000005478c9 <arith_driver+249>:	45 84 ff	test   %r15b,%r15b
   0x00000000005478cc <arith_driver+252>:	0f 85 5e ff ff ff	jne    0x547830 <arith_driver+96>
(gdb) s
2670	      val = args[argnum];
=> 0x00000000005478d2 <arith_driver+258>:	49 8b 3c de	mov    (%r14,%rbx,8),%rdi
(gdb) s
2663	      if (! overflow)
=> 0x00000000005478d6 <arith_driver+262>:	49 89 ea	mov    %rbp,%r10
   0x00000000005478d9 <arith_driver+265>:	48 89 5c 24 18	mov    %rbx,0x18(%rsp)
(gdb) s
2671	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);
(gdb) s
MARKERP (x=-7377020154) at data.c:2671
2671	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);
(gdb) s
MISCP (x=-7377020154) at data.c:2671
2671	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);
(gdb) s
XTYPE (a=-7377020154) at lisp.h:864
864	  return lisp_h_XTYPE (a);
=> 0x00000000005478de <arith_driver+270>:	89 f8	mov    %edi,%eax
   0x00000000005478e0 <arith_driver+272>:	89 fa	mov    %edi,%edx
   0x00000000005478e2 <arith_driver+274>:	83 e0 07	and    $0x7,%eax
(gdb) s
MARKERP (x=-7377020154) at lisp.h:2618
2618	  return lisp_h_MARKERP (x);
=> 0x00000000005478e5 <arith_driver+277>:	83 f8 01	cmp    $0x1,%eax
   0x00000000005478e8 <arith_driver+280>:	0f 85 56 ff ff ff	jne    0x547844 <arith_driver+116>
   0x00000000005478ee <arith_driver+286>:	66 81 7f ff ac 5e	cmpw   $0x5eac,-0x1(%rdi)
   0x00000000005478f4 <arith_driver+292>:	0f 84 66 ff ff ff	je     0x547860 <arith_driver+144>
(gdb) s
arith_driver (code=Amult, nargs=2, args=0x7fffffffd750) at data.c:2671
2671	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);
(gdb) s
NUMBERP (x=-7377020154) at data.c:2671
2671	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);
(gdb) s
INTEGERP (x=<optimized out>) at lisp.h:2608
2608	  return lisp_h_INTEGERP (x);
=> 0x0000000000547844 <arith_driver+116>:	89 fa	mov    %edi,%edx
   0x0000000000547846 <arith_driver+118>:	83 e2 03	and    $0x3,%edx
(gdb) s
NUMBERP (x=-7377020154) at lisp.h:2566
2566	  return INTEGERP (x) || FLOATP (x);
=> 0x0000000000547849 <arith_driver+121>:	83 fa 02	cmp    $0x2,%edx
   0x000000000054784c <arith_driver+124>:	74 38	je     0x547886 <arith_driver+182>
   0x000000000054784e <arith_driver+126>:	83 f8 07	cmp    $0x7,%eax
   0x0000000000547851 <arith_driver+129>:	74 33	je     0x547886 <arith_driver+182>
(gdb) s
arith_driver (code=Amult, nargs=2, args=0x7fffffffd750) at data.c:2673
2673	      if (FLOATP (val))
=> 0x0000000000547886 <arith_driver+182>:	83 f8 07	cmp    $0x7,%eax
   0x0000000000547889 <arith_driver+185>:	0f 84 a1 01 00 00	je     0x547a30 <arith_driver+608>
(gdb) s
2676	      args[argnum] = val;
=> 0x000000000054788f <arith_driver+191>:	49 89 3c de	mov    %rdi,(%r14,%rbx,8)
(gdb) s
2677	      next = XINT (args[argnum]);
(gdb) 
XINT (a=-7377020154) at lisp.h:844
844	  return lisp_h_XINT (a);
=> 0x0000000000547893 <arith_driver+195>:	48 c1 ff 02	sar    $0x2,%rdi
(gdb) s
arith_driver (code=Amult, nargs=2, args=0x7fffffffd750) at data.c:2678
2678	      switch (code)
=> 0x0000000000547897 <arith_driver+199>:	41 83 fd 08	cmp    $0x8,%r13d
   0x000000000054789b <arith_driver+203>:	77 23	ja     0x5478c0 <arith_driver+240>
   0x000000000054789d <arith_driver+205>:	ff 24 cd 60 f5 5e 00	jmpq   *0x5ef560(,%rcx,8)
   0x00000000005478a4 <arith_driver+212>:	0f 1f 40 00	nopl   0x0(%rax)
(gdb) s
2690		  overflow |= INT_MULTIPLY_WRAPV (accum, next, &accum);
=> 0x0000000000547998 <arith_driver+456>:	48 0f af fd	imul   %rbp,%rdi
   0x000000000054799c <arith_driver+460>:	0f 90 c0	seto   %al
   0x000000000054799f <arith_driver+463>:	48 89 fd	mov    %rdi,%rbp
   0x00000000005479a2 <arith_driver+466>:	41 09 c7	or     %eax,%r15d
(gdb) s
2691		  break;
=> 0x00000000005479a5 <arith_driver+469>:	e9 16 ff ff ff	jmpq   0x5478c0 <arith_driver+240>
   0x00000000005479aa <arith_driver+474>:	66 0f 1f 44 00 00	nopw   0x0(%rax,%rax,1)
(gdb) s
2661	  for (argnum = 0; argnum < nargs; argnum++)
=> 0x00000000005478c0 <arith_driver+240>:	48 83 c3 01	add    $0x1,%rbx
   0x00000000005478c4 <arith_driver+244>:	49 39 dc	cmp    %rbx,%r12
   0x00000000005478c7 <arith_driver+247>:	7e 57	jle    0x547920 <arith_driver+336>
(gdb) s
2727	}
=> 0x0000000000547928 <arith_driver+344>:	48 83 c4 28	add    $0x28,%rsp
   0x000000000054792c <arith_driver+348>:	5b	pop    %rbx
   0x000000000054792d <arith_driver+349>:	5d	pop    %rbp
   0x000000000054792e <arith_driver+350>:	41 5c	pop    %r12
   0x0000000000547930 <arith_driver+352>:	41 5d	pop    %r13
   0x0000000000547932 <arith_driver+354>:	41 5e	pop    %r14
   0x0000000000547934 <arith_driver+356>:	41 5f	pop    %r15
   0x0000000000547936 <arith_driver+358>:	c3	retq   
   0x0000000000547937 <arith_driver+359>:	66 0f 1f 84 00 00 00 00 00	nopw   0x0(%rax,%rax,1)
(gdb) s
eval_sub (form=<optimized out>) at eval.c:2146
2146		  lisp_eval_depth--;
=> 0x000000000055ad50 <eval_sub+1520>:	48 83 2d 50 7d 62 00 01	subq   $0x1,0x627d50(%rip)        # 0xb82aa8 <lisp_eval_depth>
(gdb) s
2143		  val = (XSUBR (fun)->function.aMANY) (XINT (numargs), vals);
=> 0x000000000055ad58 <eval_sub+1528>:	48 89 c3	mov    %rax,%rbx
(gdb) s
